= Trouble shooting =

Listed below are common errors seen when building BioLib. Problems
specific to a language are in documents PERL.txt, RUBY.txt etc. in
./doc or ./tools/cmake-support/doc.

See also \file{tools/cmake-support/doc/TROUBLESHOOTING.txt}!

See also ./doc/REPORTINGBUGS.txt if you want to send a problem
upstream.

= Building BioLib =

== Could not find Cmake module ==

An error like:

  Could not find module FindGitSubmodule.cmake or a configuration file for package GitSubmodule 

Points out the cmake-support submodule has not been initialized in
the source repository. BioLib uses submodules to bring together
different git repositories. Fix with:

  git submodule init
  git submodule update

(this should be done by the configure script)

== Can not find shared library ==

An error like:

  libz.so.1: cannot open shared object file: No such file or directory

points to a path problem for loading shared libraries. One problem
could be you are using a Nix build of Ruby, which does not find the
standard .so files.

Normally CMake build scripts should intercept these dependencies and
resolve them.

== Cmake gives: Permission denied (publickey) ==

Ouch, cmake is trying to update a git submodule which has an ssh
path. All entries the the file .gitmodules should look like:

  url = git://github.com/pjotrp/rqtl.git

rather then:

  url = git@github.com:pjotrp/rqtl.git

If you fix this yourself, also fix the items in .git/config.

Contact the developers with this error.


= Developing with BioLib =

== Symbol lookup error ==

When creating a module you get a symbol lookup error like

  /usr/bin/ruby: symbol lookup error: ../rqtl/biolib/rqtl.so:
  undefined symbol: _Z10scanone_mriiiPPiPPdiS2_iS1_S1_S1_

The 'mangled' symbol name is the C++ linkage version. It may be the
shared library was compiled as a C linkage library. One possibility
is to enforce C compilation of the SWIG module.

In the CMakeLists.txt file define

  SET(USE_C_LINKAGE TRUE)

= Debugging BioLib =

It is possible to debug C libraries without having debug versions of
the (high-level) language interpreter. Use cmake -DDEBUG=1 to compile
the C-library and the SWIG module. Next enter gdb with the binary path
of the interpreter. For example:

  gdb /usr/bin/ruby
  run "-I../rqtl" "./../test/test_rqtl.rb"
  (crash)

typing 'where' will give you a stack trace.


# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _bpp_
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _bpp_.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _bpp_.PySwigIterator_value(*args)
    def incr(*args): return _bpp_.PySwigIterator_incr(*args)
    def decr(*args): return _bpp_.PySwigIterator_decr(*args)
    def distance(*args): return _bpp_.PySwigIterator_distance(*args)
    def equal(*args): return _bpp_.PySwigIterator_equal(*args)
    def copy(*args): return _bpp_.PySwigIterator_copy(*args)
    def next(*args): return _bpp_.PySwigIterator_next(*args)
    def previous(*args): return _bpp_.PySwigIterator_previous(*args)
    def advance(*args): return _bpp_.PySwigIterator_advance(*args)
    def __eq__(*args): return _bpp_.PySwigIterator___eq__(*args)
    def __ne__(*args): return _bpp_.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _bpp_.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _bpp_.PySwigIterator___isub__(*args)
    def __add__(*args): return _bpp_.PySwigIterator___add__(*args)
    def __sub__(*args): return _bpp_.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _bpp_.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    erase_event = _bpp_.ios_base_erase_event
    imbue_event = _bpp_.ios_base_imbue_event
    copyfmt_event = _bpp_.ios_base_copyfmt_event
    def register_callback(*args): return _bpp_.ios_base_register_callback(*args)
    def flags(*args): return _bpp_.ios_base_flags(*args)
    def setf(*args): return _bpp_.ios_base_setf(*args)
    def unsetf(*args): return _bpp_.ios_base_unsetf(*args)
    def precision(*args): return _bpp_.ios_base_precision(*args)
    def width(*args): return _bpp_.ios_base_width(*args)
    __swig_getmethods__["sync_with_stdio"] = lambda x: _bpp_.ios_base_sync_with_stdio
    if _newclass:sync_with_stdio = staticmethod(_bpp_.ios_base_sync_with_stdio)
    def imbue(*args): return _bpp_.ios_base_imbue(*args)
    def getloc(*args): return _bpp_.ios_base_getloc(*args)
    __swig_getmethods__["xalloc"] = lambda x: _bpp_.ios_base_xalloc
    if _newclass:xalloc = staticmethod(_bpp_.ios_base_xalloc)
    def iword(*args): return _bpp_.ios_base_iword(*args)
    def pword(*args): return _bpp_.ios_base_pword(*args)
    __swig_destroy__ = _bpp_.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _bpp_.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _bpp_.cvar
ios_base.boolalpha = _bpp_.cvar.ios_base_boolalpha
ios_base.dec = _bpp_.cvar.ios_base_dec
ios_base.fixed = _bpp_.cvar.ios_base_fixed
ios_base.hex = _bpp_.cvar.ios_base_hex
ios_base.internal = _bpp_.cvar.ios_base_internal
ios_base.left = _bpp_.cvar.ios_base_left
ios_base.oct = _bpp_.cvar.ios_base_oct
ios_base.right = _bpp_.cvar.ios_base_right
ios_base.scientific = _bpp_.cvar.ios_base_scientific
ios_base.showbase = _bpp_.cvar.ios_base_showbase
ios_base.showpoint = _bpp_.cvar.ios_base_showpoint
ios_base.showpos = _bpp_.cvar.ios_base_showpos
ios_base.skipws = _bpp_.cvar.ios_base_skipws
ios_base.unitbuf = _bpp_.cvar.ios_base_unitbuf
ios_base.uppercase = _bpp_.cvar.ios_base_uppercase
ios_base.adjustfield = _bpp_.cvar.ios_base_adjustfield
ios_base.basefield = _bpp_.cvar.ios_base_basefield
ios_base.floatfield = _bpp_.cvar.ios_base_floatfield
ios_base.badbit = _bpp_.cvar.ios_base_badbit
ios_base.eofbit = _bpp_.cvar.ios_base_eofbit
ios_base.failbit = _bpp_.cvar.ios_base_failbit
ios_base.goodbit = _bpp_.cvar.ios_base_goodbit
ios_base.app = _bpp_.cvar.ios_base_app
ios_base.ate = _bpp_.cvar.ios_base_ate
ios_base.binary = _bpp_.cvar.ios_base_binary
ios_base.ios_base_in = _bpp_.cvar.ios_base_ios_base_in
ios_base.out = _bpp_.cvar.ios_base_out
ios_base.trunc = _bpp_.cvar.ios_base_trunc
ios_base.beg = _bpp_.cvar.ios_base_beg
ios_base.cur = _bpp_.cvar.ios_base_cur
ios_base.end = _bpp_.cvar.ios_base_end
ios_base_sync_with_stdio = _bpp_.ios_base_sync_with_stdio
ios_base_xalloc = _bpp_.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(*args): return _bpp_.ios_rdstate(*args)
    def clear(*args): return _bpp_.ios_clear(*args)
    def setstate(*args): return _bpp_.ios_setstate(*args)
    def good(*args): return _bpp_.ios_good(*args)
    def eof(*args): return _bpp_.ios_eof(*args)
    def fail(*args): return _bpp_.ios_fail(*args)
    def bad(*args): return _bpp_.ios_bad(*args)
    def exceptions(*args): return _bpp_.ios_exceptions(*args)
    def __init__(self, *args): 
        this = _bpp_.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bpp_.delete_ios
    __del__ = lambda self : None;
    def tie(*args): return _bpp_.ios_tie(*args)
    def rdbuf(*args): return _bpp_.ios_rdbuf(*args)
    def copyfmt(*args): return _bpp_.ios_copyfmt(*args)
    def fill(*args): return _bpp_.ios_fill(*args)
    def imbue(*args): return _bpp_.ios_imbue(*args)
    def narrow(*args): return _bpp_.ios_narrow(*args)
    def widen(*args): return _bpp_.ios_widen(*args)
ios_swigregister = _bpp_.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bpp_.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bpp_.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(*args): return _bpp_.ostream___lshift__(*args)
    def put(*args): return _bpp_.ostream_put(*args)
    def write(*args): return _bpp_.ostream_write(*args)
    def flush(*args): return _bpp_.ostream_flush(*args)
    def tellp(*args): return _bpp_.ostream_tellp(*args)
    def seekp(*args): return _bpp_.ostream_seekp(*args)
ostream_swigregister = _bpp_.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bpp_.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bpp_.delete_istream
    __del__ = lambda self : None;
    def __rshift__(*args): return _bpp_.istream___rshift__(*args)
    def gcount(*args): return _bpp_.istream_gcount(*args)
    def get(*args): return _bpp_.istream_get(*args)
    def getline(*args): return _bpp_.istream_getline(*args)
    def ignore(*args): return _bpp_.istream_ignore(*args)
    def peek(*args): return _bpp_.istream_peek(*args)
    def read(*args): return _bpp_.istream_read(*args)
    def readsome(*args): return _bpp_.istream_readsome(*args)
    def putback(*args): return _bpp_.istream_putback(*args)
    def unget(*args): return _bpp_.istream_unget(*args)
    def sync(*args): return _bpp_.istream_sync(*args)
    def tellg(*args): return _bpp_.istream_tellg(*args)
    def seekg(*args): return _bpp_.istream_seekg(*args)
istream_swigregister = _bpp_.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bpp_.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bpp_.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _bpp_.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _bpp_.endl_cb_ptr
endl = _bpp_.endl
ends_cb_ptr = _bpp_.ends_cb_ptr
ends = _bpp_.ends
flush_cb_ptr = _bpp_.flush_cb_ptr
flush = _bpp_.flush
class FileTools(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileTools, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileTools, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DIR_SEP"] = _bpp_.FileTools_DIR_SEP_set
    __swig_getmethods__["DIR_SEP"] = _bpp_.FileTools_DIR_SEP_get
    if _newclass:DIR_SEP = _swig_property(_bpp_.FileTools_DIR_SEP_get, _bpp_.FileTools_DIR_SEP_set)
    def __init__(self, *args): 
        this = _bpp_.new_FileTools(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bpp_.delete_FileTools
    __del__ = lambda self : None;
    __swig_getmethods__["fileExists"] = lambda x: _bpp_.FileTools_fileExists
    if _newclass:fileExists = staticmethod(_bpp_.FileTools_fileExists)
    __swig_getmethods__["directoryExists"] = lambda x: _bpp_.FileTools_directoryExists
    if _newclass:directoryExists = staticmethod(_bpp_.FileTools_directoryExists)
    __swig_getmethods__["getFileName"] = lambda x: _bpp_.FileTools_getFileName
    if _newclass:getFileName = staticmethod(_bpp_.FileTools_getFileName)
    def getParent(*args): return _bpp_.FileTools_getParent(*args)
    __swig_getmethods__["getExtension"] = lambda x: _bpp_.FileTools_getExtension
    if _newclass:getExtension = staticmethod(_bpp_.FileTools_getExtension)
    __swig_getmethods__["putStreamIntoVectorOfStrings"] = lambda x: _bpp_.FileTools_putStreamIntoVectorOfStrings
    if _newclass:putStreamIntoVectorOfStrings = staticmethod(_bpp_.FileTools_putStreamIntoVectorOfStrings)
    __swig_getmethods__["getNextLine"] = lambda x: _bpp_.FileTools_getNextLine
    if _newclass:getNextLine = staticmethod(_bpp_.FileTools_getNextLine)
FileTools_swigregister = _bpp_.FileTools_swigregister
FileTools_swigregister(FileTools)
FileTools_fileExists = _bpp_.FileTools_fileExists
FileTools_directoryExists = _bpp_.FileTools_directoryExists
FileTools_getFileName = _bpp_.FileTools_getFileName
FileTools_getExtension = _bpp_.FileTools_getExtension
FileTools_putStreamIntoVectorOfStrings = _bpp_.FileTools_putStreamIntoVectorOfStrings
FileTools_getNextLine = _bpp_.FileTools_getNextLine




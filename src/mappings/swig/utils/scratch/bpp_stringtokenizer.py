# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _bpp_stringtokenizer
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _bpp_stringtokenizer.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _bpp_stringtokenizer.PySwigIterator_value(*args)
    def incr(*args): return _bpp_stringtokenizer.PySwigIterator_incr(*args)
    def decr(*args): return _bpp_stringtokenizer.PySwigIterator_decr(*args)
    def distance(*args): return _bpp_stringtokenizer.PySwigIterator_distance(*args)
    def equal(*args): return _bpp_stringtokenizer.PySwigIterator_equal(*args)
    def copy(*args): return _bpp_stringtokenizer.PySwigIterator_copy(*args)
    def next(*args): return _bpp_stringtokenizer.PySwigIterator_next(*args)
    def previous(*args): return _bpp_stringtokenizer.PySwigIterator_previous(*args)
    def advance(*args): return _bpp_stringtokenizer.PySwigIterator_advance(*args)
    def __eq__(*args): return _bpp_stringtokenizer.PySwigIterator___eq__(*args)
    def __ne__(*args): return _bpp_stringtokenizer.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _bpp_stringtokenizer.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _bpp_stringtokenizer.PySwigIterator___isub__(*args)
    def __add__(*args): return _bpp_stringtokenizer.PySwigIterator___add__(*args)
    def __sub__(*args): return _bpp_stringtokenizer.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _bpp_stringtokenizer.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class Exception:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bpp_stringtokenizer.new_Exception(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bpp_stringtokenizer.delete_Exception
    __del__ = lambda self : None;
    def what(*args): return _bpp_stringtokenizer.Exception_what(*args)
Exception_swigregister = _bpp_stringtokenizer.Exception_swigregister
Exception_swigregister(Exception)

class IOException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bpp_stringtokenizer.new_IOException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bpp_stringtokenizer.delete_IOException
    __del__ = lambda self : None;
IOException_swigregister = _bpp_stringtokenizer.IOException_swigregister
IOException_swigregister(IOException)

class NullPointerException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullPointerException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullPointerException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bpp_stringtokenizer.new_NullPointerException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bpp_stringtokenizer.delete_NullPointerException
    __del__ = lambda self : None;
NullPointerException_swigregister = _bpp_stringtokenizer.NullPointerException_swigregister
NullPointerException_swigregister(NullPointerException)

class ZeroDivisionException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroDivisionException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroDivisionException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bpp_stringtokenizer.new_ZeroDivisionException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bpp_stringtokenizer.delete_ZeroDivisionException
    __del__ = lambda self : None;
ZeroDivisionException_swigregister = _bpp_stringtokenizer.ZeroDivisionException_swigregister
ZeroDivisionException_swigregister(ZeroDivisionException)

class BadIntegerException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BadIntegerException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BadIntegerException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bpp_stringtokenizer.new_BadIntegerException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bpp_stringtokenizer.delete_BadIntegerException
    __del__ = lambda self : None;
    def getBadInteger(*args): return _bpp_stringtokenizer.BadIntegerException_getBadInteger(*args)
BadIntegerException_swigregister = _bpp_stringtokenizer.BadIntegerException_swigregister
BadIntegerException_swigregister(BadIntegerException)

class BadNumberException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BadNumberException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BadNumberException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bpp_stringtokenizer.new_BadNumberException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bpp_stringtokenizer.delete_BadNumberException
    __del__ = lambda self : None;
    def getBadNumber(*args): return _bpp_stringtokenizer.BadNumberException_getBadNumber(*args)
BadNumberException_swigregister = _bpp_stringtokenizer.BadNumberException_swigregister
BadNumberException_swigregister(BadNumberException)

class NumberFormatException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumberFormatException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumberFormatException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bpp_stringtokenizer.new_NumberFormatException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bpp_stringtokenizer.delete_NumberFormatException
    __del__ = lambda self : None;
    def getBadNumber(*args): return _bpp_stringtokenizer.NumberFormatException_getBadNumber(*args)
NumberFormatException_swigregister = _bpp_stringtokenizer.NumberFormatException_swigregister
NumberFormatException_swigregister(NumberFormatException)

class IndexOutOfBoundsException(BadIntegerException):
    __swig_setmethods__ = {}
    for _s in [BadIntegerException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexOutOfBoundsException, name, value)
    __swig_getmethods__ = {}
    for _s in [BadIntegerException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexOutOfBoundsException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bpp_stringtokenizer.new_IndexOutOfBoundsException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bpp_stringtokenizer.delete_IndexOutOfBoundsException
    __del__ = lambda self : None;
    def getBounds(*args): return _bpp_stringtokenizer.IndexOutOfBoundsException_getBounds(*args)
IndexOutOfBoundsException_swigregister = _bpp_stringtokenizer.IndexOutOfBoundsException_swigregister
IndexOutOfBoundsException_swigregister(IndexOutOfBoundsException)

class StringTokenizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringTokenizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringTokenizer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bpp_stringtokenizer.new_StringTokenizer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bpp_stringtokenizer.delete_StringTokenizer
    __del__ = lambda self : None;
    def nextToken(*args): return _bpp_stringtokenizer.StringTokenizer_nextToken(*args)
    def hasMoreToken(*args): return _bpp_stringtokenizer.StringTokenizer_hasMoreToken(*args)
    def numberOfRemainingTokens(*args): return _bpp_stringtokenizer.StringTokenizer_numberOfRemainingTokens(*args)
    def getToken(*args): return _bpp_stringtokenizer.StringTokenizer_getToken(*args)
    def getTokens(*args): return _bpp_stringtokenizer.StringTokenizer_getTokens(*args)
    def removeEmptyTokens(*args): return _bpp_stringtokenizer.StringTokenizer_removeEmptyTokens(*args)
StringTokenizer_swigregister = _bpp_stringtokenizer.StringTokenizer_swigregister
StringTokenizer_swigregister(StringTokenizer)



